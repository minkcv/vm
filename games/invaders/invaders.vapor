// Invaders
// 2018 Will Smith (minkcv)

var previousGPUState;
var GPUState;
var buttons;
var prevButtons;
var ticks;
var ticks2;

var spriteIndex;
var spriteSegment;

var playerX;
var playerY;
var playerMoveSpeed;
const playerWidth 32;
const playerHeight 16;
const playerSpriteSegment 128;
const playerSpriteOffset 0;
const playerSpriteSize 128; // Bytes

var nBullets;
const maxBullets 4;
const bulletSpriteSegment 128;
const bulletSpriteOffset 128;
const bulletSpriteSize 4; // Bytes
const bulletXSegment 0;
const bulletYSegment 1;
const bulletWidth 4;
const bulletHeight 4;
const bulletMoveSpeed 4;
var clearBullets;

var nEnemies;
const maxEnemies 4;
const enemySpriteSegment 128;
const enemySpriteOffset 132;
const enemySpriteSize 64; // Bytes
const enemyXSegment 2;
const enemyYSegment 3;
const enemyModeSegment 4;
const modeMoveUp 0;
const modeMoveDown 1;
const enemyWidth 16;
const enemyHeight 16;
const enemyMoveSpeed 2;
var clearEnemies;
var collideIndex;

var i;
var i2;
var x;
var y;
var x2;
var y2;
var m;

call reset;
call initSprites;

// Enable GPU
[ 127 , 17 ] = 1;

// Main loop
while 1 {
    buttons = [ 127 , 0 ];
    if buttons & 1 == 1 { // Up
        if playerY > 0 {
            playerY = playerY - playerMoveSpeed;
        }
    }
    if buttons & 2 == 2 { // Down
        if playerY < 192 - playerMoveSpeed + playerHeight - 2 {
            playerY = playerY + playerMoveSpeed;
        }
    }
    if buttons & 4 == 4 { // Left
        if playerX > 0 {
            playerX = playerX - playerMoveSpeed
        }
    }
    if buttons & 8 == 8 { // Right
        if playerX < 255 - playerWidth + playerMoveSpeed - 2 {
            playerX = playerX + playerMoveSpeed;
        }
    }
    if buttons & 16 == 16 { // Right control
        if prevButtons & 16 == 0 {
            call shoot;
        }
    }

    call updateEnemies;
    call updateBullets;

    prevButtons = buttons;
        call render;
        call waitScreen;
}

func updateBullets {
    // Clear bullets at the right edge of the screen
    i = 0;
    while i < nBullets {
        x = [ bulletXSegment , i ];
        if x > 250 {
            x = [ bulletXSegment , nBullets - 1 ];
            y = [ bulletYSegment , nBullets - 1 ];
            [ bulletXSegment , i ] = x;
            [ bulletYSegment , i ] = y;
            nBullets = nBullets - 1;
            i = i - 1;
            clearBullets = 1;
        }
        i = i + 1;
    }
    // Move bullets right
    i = 0;
    while i < nBullets {
        x = [ bulletXSegment , i ];
        x = x + bulletMoveSpeed;
        [ bulletXSegment , i ] = x;
        i = i + 1;
        
    }
}

func updateEnemies {
    i = 0;
    while i < nEnemies {
        collideIndex = nEnemies;
        x = [ enemyXSegment , i ];
        y = [ enemyYSegment , i ];
        m = [ enemyModeSegment , i ];
        x = x - enemyMoveSpeed;
        [ enemyXSegment , i ] = x;
        if m == modeMoveDown {
            y = y - enemyMoveSpeed;
        }
        if m == modeMoveUp {
            y = y + enemyMoveSpeed;
        }
        [ enemyYSegment , i ] = y;

        i2 = 0;
        while i2 < nBullets {
            x2 = [ bulletXSegment , i2 ];
            y2 = [ bulletYSegment , i2 ];
            if x2 + bulletWidth > x {
                if x2 < x + enemyWidth {
                    if y2 + bulletHeight > y {
                        if y2 < y + enemyHeight {
                            collideIndex = i2;
                        }
                    }
                }
            }
            i2 = i2 + 1;
        }

        if collideIndex < nEnemies {
            x = [ enemyXSegment , nEnemies - 1 ];
            y = [ enemyYSegment , nEnemies - 1 ];
            m = [ enemyModeSegment , nEnemies - 1 ];
            [ enemyXSegment , collideIndex ] = x;
            [ enemyYSegment , collideIndex ] = y;
            [ enemyModeSegment , collideIndex ] = m;
            nEnemies = nEnemies - 1;
            clearEnemies = 1;
        }

        i = i + 1;
    }
}

func shoot {
    if nBullets < maxBullets {
        [ bulletXSegment , nBullets ] = playerX + 16;
        [ bulletYSegment , nBullets ] = playerY + 8; // Middle of player height
        nBullets = nBullets + 1;
    }
}

func reset {
    playerX = 16;
    playerY = 64;
    playerMoveSpeed = 2;
    nBullets = 0;
    clearBullets = 0;
    nEnemies = 0;
    clearEnemies = 0;

    nEnemies = 1;
    [ enemyXSegment , 0 ] = 100;
    [ enemyYSegment , 0 ] = 100;
}

func render {
    // Update player sprite location
    spriteSegment = 74;
    [ spriteSegment , 1 ] = playerX;
    [ spriteSegment , 2 ] = playerY;

    if clearBullets {
        spriteIndex = 16;
        i = 0;
        while i < maxBullets {
            [ spriteSegment , spriteIndex ] = 0; // Disable
            spriteIndex = spriteIndex + 16;
            i = i + 1;
        }
        clearBullets = 0;
    }
    if clearEnemies {
        spriteIndex = 80;
        i = 0;
        while i < maxEnemies {
            [ spriteSegment , spriteIndex ] = 0; // Disable
            spriteIndex = spriteIndex + 16;
            i = i + 1;
        }
        clearEnemies = 0;
    }
    // Bullets
    spriteIndex = 16;
    i = 0;
    while i < nBullets {
        x = [ bulletXSegment , i ];
        y = [ bulletYSegment , i ];
        [ spriteSegment , spriteIndex ] = 144; // Enable and transparency
        [ spriteSegment , spriteIndex + 1 ] = x;
        [ spriteSegment , spriteIndex + 2 ] = y;
        spriteIndex = spriteIndex + 16;
        i = i + 1;
    }
    spriteIndex = 80;
    i = 0;
    while i < nEnemies {
        x = [ enemyXSegment , i ];
        y = [ enemyYSegment , i ];
        [ spriteSegment , spriteIndex ] = 144; // Enable and transparency
        [ spriteSegment , spriteIndex + 1 ] = x;
        [ spriteSegment , spriteIndex + 2 ] = y;
        spriteIndex = spriteIndex + 16;
        i = i + 1;
    }
}

func initSprites {
    // Player
    spriteSegment = 74; // Top segment
    [ spriteSegment , 0 ] = 144; // Enable and transparency
    [ spriteSegment , 1 ] = playerX;
    [ spriteSegment , 2 ] = playerY;
    [ spriteSegment , 3 ] = playerWidth
    [ spriteSegment , 4 ] = playerHeight;
    [ spriteSegment , 5 ] = playerSpriteSegment;
    [ spriteSegment , 6 ] = playerSpriteOffset;
    [ spriteSegment , 7 ] = 255;

    // Bullets
    spriteIndex = 16;
    i = 0;
    while i < maxBullets {
        [ spriteSegment , spriteIndex + 3 ] = bulletWidth;
        [ spriteSegment , spriteIndex + 4 ] = bulletHeight;
        [ spriteSegment , spriteIndex + 5 ] = bulletSpriteSegment;
        [ spriteSegment , spriteIndex + 6 ] = bulletSpriteOffset;
        [ spriteSegment , spriteIndex + 7 ] = 255;
        spriteIndex = spriteIndex + 16;
        i = i + 1;
    }
    // Enemies
    spriteIndex = 80;
    i = 0;
    while i < maxEnemies {
        [ spriteSegment , spriteIndex + 3 ] = enemyWidth;
        [ spriteSegment , spriteIndex + 4 ] = enemyHeight;
        [ spriteSegment , spriteIndex + 5 ] = enemySpriteSegment;
        [ spriteSegment , spriteIndex + 6 ] = enemySpriteOffset;
        [ spriteSegment , spriteIndex + 7 ] = 255;
        spriteIndex = spriteIndex + 16;
        i = i + 1;
    }
}

func waitScreen {
    while GPUState == previousGPUState {
        GPUState = [ 127 , 17 ];
        GPUState = GPUState & 2;
    }
    previousGPUState = GPUState;
    ticks = ticks + 1;
    if ticks == 255 {
        ticks2 = ticks2 + 1;
    }
}
